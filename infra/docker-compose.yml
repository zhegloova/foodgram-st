services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=foodgram
      - POSTGRES_USER=foodgram_user
      - POSTGRES_PASSWORD=foodgram_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U foodgram_user -d foodgram"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: 
      context: ../backend
      dockerfile: Dockerfile
    volumes:
      - backend_static:/app/static/
      - media_value:/app/media/
      - ../data/:/app/data/
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-here
      - ALLOWED_HOSTS=localhost,127.0.0.1
      - POSTGRES_DB=foodgram
      - POSTGRES_USER=foodgram_user
      - POSTGRES_PASSWORD=foodgram_password
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_SUPERUSER_EMAIL=admin@example.com
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_PASSWORD=admin
      - DJANGO_SUPERUSER_FIRST_NAME=Admin
      - DJANGO_SUPERUSER_LAST_NAME=Admin
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             echo 'from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username=\"admin\").exists() or User.objects.create_superuser(username=\"admin\", email=\"admin@example.com\", password=\"admin\", first_name=\"admin\", last_name=\"Admin\")' | python manage.py shell &&
             python manage.py import_ingredients /app/data/ingredients.csv &&
             gunicorn foodgram.wsgi:application --bind 0.0.0.0:8000"

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    command: >
      cp -r /app/build /frontend
    volumes:
      - frontend_build:/frontend/build

  nginx:
    image: nginx:1.21.3-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - frontend_build:/usr/share/nginx/html/
      - backend_static:/var/html/backend_static/
      - media_value:/var/html/media/
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  frontend_build:
  backend_static:
  media_value: 